/* Fa√ßa cinco programas, um para cada opera√ß√£o aritm√©tica b√°sica. Seu programa deve ter duas constantes, a e b, definidas no come√ßo com os valores que ser√£o operados. Fa√ßa programas para:

Adi√ß√£o (a + b)
Subtra√ß√£o (a - b)
Multiplica√ß√£o (a * b)
Divis√£o (a / b)
M√≥dulo (a % b)
 */

let A = 10;
let B = 20;

const Adicao = A + B;
const Subtracao = A + B;
const Multiplicacao = A * B;
const Divisao = A / B;
const Modulo = A % B;

console.log(
`Adi√ß√£o: ${Adicao}
Subtra√ß√£o: ${Subtracao}
Multiplica√ß√£o: ${Multiplicacao}
Divis√£o: ${Divisao}
M√≥dulo: ${Modulo}`
);

// Fa√ßa um programa que retorne o maior de dois n√∫meros. Defina no come√ßo do programa duas constantes com os valores que ser√£o comparados.

let A = 20;
let B = 15;

if(A > B){
  console.log('A √© maior que B');
}
else{
  console.log('B √© maior que A');
}

// Fa√ßa um programa que retorne o maior de tr√™s n√∫meros. Defina no come√ßo do programa tr√™s constantes com os valores que ser√£o comparados.

let A = 40;
let B = 58;
let C = 69;

if( A > B && A > C){
  console.log('A √© maior que B e C');
}
else if(B > A && B > C){
  console.log('B √© maior que A e C');
}
else{
  console.log('C √© maior que A e B');
}

//Fa√ßa um programa que, dado um valor recebido como par√¢metro, retorne "positive" se esse valor for positivo, "negative" se for negativo, e caso n√£o seja nem positivo e nem negativo retorne "zero".

let A = 15;

if( A % 2 === 0 ){
  console.log('Esse n√∫mero √© positivo!');
}else{
  console.log('Esse n√∫mero √© negativo!');
}

//üöÄ Fa√ßa um programa que defina tr√™s vari√°veis com os valores dos tr√™s √¢ngulos internos de um tri√¢ngulo. Retorne true se os √¢ngulos representarem os √¢ngulos de um tri√¢ngulo e false, caso contr√°rio. Se algum √¢ngulo for inv√°lido o programa deve retornar uma mensagem de erro.

let A = -1;
let B = 70;
let C = 60;


if(A + B + C === 180){
  console.log(true);
}
else if(A || B || C < 0){
  console.log('Ang√∫lo invalido!');
}else{
  console.log(false);
}

//Escreva um programa que receba o nome de uma pe√ßa de xadrez e retorne os movimentos que ela faz.

//Como desafio, fa√ßa o programa funcionar tanto se receber o nome de uma pe√ßa com letras mai√∫sculas quanto com letras min√∫sculas, sem aumentar a quantidade de condicionais.

//Como dica, voc√™ pode pesquisar uma fun√ß√£o que faz uma string ficar com todas as letras min√∫sculas (lower case).

//Se a pe√ßa passada for inv√°lida, o programa deve retornar uma mensagem de erro.

//Exemplo: bishop (bispo) -> diagonals (diagonais)

let rei = 'Pode mover-se em qualquer dire√ß√£o, por√©m apenas uma casa por vez, como indicam os pontos vermelhos na figura abaixo.';

let dama = 'Assim como o Rei, pode mover-se em qualquer dire√ß√£o (vertical, horizontal e diagonal), por√©m quantas casas quiser, desde que estejam livres.';

let torre = 'Move-se em linha reta, tanto na vertical quanto na horizontal, quantas casas quiser.';

let bispo = 'Move-se na diagonal, quantas casas quiser. O Bispo que iniciar a partida em uma casa branca somente poder√° transitar pelas brancas, enquanto o Bispo que inicia em uma casa preta somente poder√° transitar pelas casas pretas.';

let cavalo = '√â a √∫nica pe√ßa que pode saltar sobre as outras pe√ßas do tabuleiro, sejam elas amigas ou inimigas. O movimento executado pelo Cavalo √© conhecido por ‚Äúum-dois‚Äù ou ‚Äúem L‚Äù. Ele pode andar duas casas na horizontal e uma na vertical, ou duas na vertical e uma na horizontal, uma na horizontal e duas na vertical, e assim por diante. Quando a casa de sa√≠da do Cavalo for escura, a casa de chegada ser√° clara, e vice-versa.';

let peao = 'Move-se sempre uma casa para frente, exceto no primeiro movimento, quando pode mover-se duas casas. O pe√£o √© a √∫nica pe√ßa que n√£o pode retroceder, e tamb√©m a √∫nica que efetua a captura com um movimento diferente do utilizado para avan√ßar no tabuleiro. O pe√£o pode capturar as pe√ßas que estejam uma fileira acima, mas nas colunas adjacentes a sua.';

let pe√ßaDeXadrez = 'Rei';

switch(toLowerCase(pe√ßaDeXadrez)){
  case 'rei':
    console.log(`Rei: ${rei}`);

    break;

    case 'dama':
      console.log(`Dama: ${dama}`);

      break;

      case 'torre':
        console.log(`Torre: ${torre}`);

        break;

        case 'bispo':
          console.log(`Bispo: ${bispo}`);

          break;

          case 'cavalo':
            console.log(`Cavalo: ${cavalo}`);

            break;

            case 'pe√£o':
              console.log(`Pe√£o: ${peao} `);

              break;

              default:
                console.log('Pe√ßa inv√°lida!');
}